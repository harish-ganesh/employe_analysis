# -*- coding: utf-8 -*-
"""employe_analysis_hepler.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvK_rvRvfVscsKlOMlM6O0cyo-2446hF

## **Import libraries**
"""

from google.colab import files
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import ipywidgets as widgets
from ipywidgets import interact, interact_manual
from plotly.subplots import make_subplots
from datetime import date,time
import numpy as np
from math import floor
df = pd.DataFrame()
 
def preprocess(uploaded):
  for fn in uploaded.keys():
    temp_df = pd.read_csv(fn)

  df[['Date1','Date2','Item','Destination','Type','Rate','Duration','Amount','Currency']] = pd.DataFrame(temp_df['Date;Date;Item;Destination;Type;Rate;Duration;Amount;Currency'].str.split(';').tolist())
  df['Date'] = df['Date2'].apply(lambda x: x[1:11])
  df['Time'] = df['Date2'].apply(lambda x: x[12:20])
  #df['Hour'] = df['Date2'].apply(lambda x: str(int(x[12:14])%24)+':00-' )
  df['Hourly'] = df['Date2'].apply(lambda x: str(int(x[12:14])%24)+':00-'+str((int(x[12:14])+1)%24)+':00')
  df['Quarterly'] = df['Date2'].apply(lambda x: x[12:14]+'Q'+str(floor(int(x[15:17])/15)+1))
  df['Date'] = df['Date'].apply(lambda x : date(int(x[:4]), int(x[5:7]), int(x[8:])))
  df = df.sort_values(['Date','Time'])
  df['Duration_in_sec'] = df['Duration'].apply(lambda x: int(x.split(':')[0])*60*60+int(x.split(':')[1])*60+int(x.split(':')[2]) if not x=='' else 0)

def convert(seconds): 
    seconds = seconds % (24 * 3600) 
    hour = seconds // 3600
    seconds %= 3600
    minutes = seconds // 60
    seconds %= 60
    return "%d:%02d:%02d" % (hour, minutes, seconds)

def plot_multiple_days(temp):
  call_count = pd.DataFrame()
  call_count[['Date','#Calls']] = temp['Date'].value_counts().reset_index()
  call_count['TotalCallDuration (in minutes)']=''

  for i in range(0,call_count['Date'].shape[0]):
    call_count.iloc[i,2] = temp[temp['Date']==call_count.iloc[i,0]]['Duration_in_sec'].sum()

  call_count['TotalCallDuration (in minutes)'] = call_count['TotalCallDuration (in minutes)'].apply(lambda x : x/60)
  fig = px.bar(call_count, x='Date', y='TotalCallDuration (in minutes)',color='#Calls')
  fig.update_layout(autosize=False,width=900,height=500)
  fig.show()

def get_stats(temp):
  sms = temp[temp['Type']=='"SMS"'].shape[0]
  total_calls = temp.shape[0] - sms
  unconnected_calls = temp[temp['Duration_in_sec'] == 0].shape[0] - sms
  temp = temp[temp['Duration_in_sec'] >= 5]
  invalid_calls = total_calls - temp.shape[0] - unconnected_calls  
  return ([unconnected_calls, invalid_calls, temp.shape[0], sms],
          total_calls,convert(temp['Duration_in_sec'].sum()))

def plot_pie(temp):
  values,total_calls,duration = get_stats(temp)
  labels = ['Unconnected calls','Calls <5mins','Valid calls','SMS']  
  pie_fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
  colors = ['mediumturquoise', 'darkorange','gold', 'lightgreen']
  pie_fig.update_traces(hoverinfo='label+value', textinfo='value', textfont_size=15,
                        marker=dict(colors=colors, line=dict(color='#000000', width=2)))
  print("Calls: ",total_calls)
  print("Valid Calls Duration: ", duration)
  pie_fig.update_layout(autosize=False,width=1000,height=500)
  pie_fig.show()

def plot_one_day(temp,x,Date):
  call_count = pd.DataFrame()
  temp = temp[temp['Duration_in_sec'] >= 5]
  call_count[['TimePeriod','#Calls']] = temp[x].value_counts().reset_index()
  call_count['TotalCallDuration']=''
  performance = list()
  color = list()
  for i in range(0,call_count['TimePeriod'].shape[0]):
    call_count.iloc[i,2] = temp[temp[x]==call_count.iloc[i,0]]['Duration_in_sec'].sum()
    if call_count.iloc[i,2] < np.int64(600) and call_count.iloc[i,1]<np.int64(10):
      performance.append(' ಠ╭╮ಠ ')
      color.append("red")
    else:
      performance.append('Okay!')
      color.append("blue")
  
  call_count['Performance'] = performance
  timePeriod = call_count['TimePeriod'].tolist()
  timePeriod.sort()
  call_count['TotalCallDuration'] = call_count['TotalCallDuration'].apply(lambda x : convert(x))
  if x is 'Hourly':
    fig = px.bar(call_count, x='TimePeriod', y='#Calls',hover_data=['TotalCallDuration','#Calls'],
                color='Performance',color_discrete_map={'Okay!':'blue',' ಠ╭╮ಠ ':'red'},
                category_orders = {'TimePeriod':timePeriod})
  else:
    fig = px.bar(call_count, x='TimePeriod', y='#Calls',hover_data=['TotalCallDuration','#Calls'],
                category_orders = {'TimePeriod':timePeriod}) 
  fig.update_layout(autosize=False,width=1200,height=400)
  call_count = call_count.sort_values(by=['TimePeriod'])
  values,total_calls,duration = get_stats(temp)
  summ = pd.DataFrame([["Total:",values[2],duration,'']],
                                  columns=['TimePeriod','#Calls','TotalCallDuration','Performance'])
  call_count = call_count.append(summ)
  call_count.to_excel(str(Date)+'_'+x+'_analysis.xls',index=False)
  fig.show()

def daily_analysis(Date=None,x='Hourly'): 
  if Date:
    temp = df[df['Date']==Date]
    plot_one_day(temp,x,Date)

def monthly_analysis(start_date=None,end_date=None): 
  if start_date and end_date:
    temp = df[df['Date']>=start_date]
    temp = temp[temp['Date']<=end_date]
    plot_multiple_days(temp)

def daily_analysis_pie(Date=None): 
  if Date:
    temp = df[df['Date']==Date]
    plot_pie(temp)
